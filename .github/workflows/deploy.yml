name: Deploy to Amazon ECR

on:
  push:
    paths:
      - "Backend-ED/**"
      - "Backend-NS/**"
      - "Backend-UM/**"
      - "Frontend/**"
    branches:
      - master

  workflow_dispatch: # ðŸ”¹ Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # ðŸ”¹ Change this if needed

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine Changed Services
        id: changed-files
        uses: dorny/paths-filter@v2
        with:
          filters: |
            Backend-ED:
              - "Backend-ED/**"
            Backend-NS:
              - "Backend-NS/**"
            Backend-UM:
              - "Backend-UM/**"
            Frontend:
              - "Frontend/**"

      - name: Ensure ECR Repository Exists for Backend-ED
        if: steps.changed-files.outputs.Backend-ED == 'true'
        run: |
          aws ecr describe-repositories --repository-names backend-ed || \
          aws ecr create-repository --repository-name backend-ed

      - name: Build & Push Docker Image for Backend-ED
        if: steps.changed-files.outputs.Backend-ED == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/backend-ed:$IMAGE_TAG -f Backend-ED/Dockerfile Backend-ED
          docker push $ECR_REGISTRY/backend-ed:$IMAGE_TAG

      - name: Ensure ECR Repository Exists for Backend-NS
        if: steps.changed-files.outputs.Backend-NS == 'true'
        run: |
          aws ecr describe-repositories --repository-names backend-ns || \
          aws ecr create-repository --repository-name backend-ns

      - name: Build & Push Docker Image for Backend-NS
        if: steps.changed-files.outputs.Backend-NS == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/backend-ns:$IMAGE_TAG -f Backend-NS/Dockerfile Backend-NS
          docker push $ECR_REGISTRY/backend-ns:$IMAGE_TAG

      - name: Ensure ECR Repository Exists for Backend-UM
        if: steps.changed-files.outputs.Backend-UM == 'true'
        run: |
          aws ecr describe-repositories --repository-names backend-um || \
          aws ecr create-repository --repository-name backend-um

      - name: Build & Push Docker Image for Backend-UM
        if: steps.changed-files.outputs.Backend-UM == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/backend-um:$IMAGE_TAG -f Backend-UM/Dockerfile Backend-UM
          docker push $ECR_REGISTRY/backend-um:$IMAGE_TAG

      - name: Ensure ECR Repository Exists for Frontend
        if: steps.changed-files.outputs.Frontend == 'true'
        run: |
          aws ecr describe-repositories --repository-names frontend || \
          aws ecr create-repository --repository-name frontend

      - name: Build & Push Docker Image for Frontend
        if: steps.changed-files.outputs.Frontend == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/frontend:$IMAGE_TAG -f Frontend/Dockerfile Frontend
          docker push $ECR_REGISTRY/frontend:$IMAGE_TAG
