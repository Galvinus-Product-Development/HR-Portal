
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")  // MongoDB connection string
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  passwordHash   String
  roleId         String
  profilePicture String?   @map("profile_picture")
  status         String    @default("active")
  lastLogin      DateTime? @map("last_login") 
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  role           Role      @relation(fields: [roleId], references: [id])
  refreshTokens  RefreshToken[]
  devices        Device[]
  passwordResetTokens PasswordResetToken[]
}

model Role {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String       @unique // SUPER_ADMIN, ADMIN, EMPLOYEE, or custom
  description     String?      
  rolePermissions RolePermission[]
  users          User[]
}

model Permission {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique  // Example: "manage_users", "view_reports"
  description String?
  rolePermissions RolePermission[]
}

model RolePermission {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String
  permissionId String

  role        Role        @relation(fields: [roleId], references: [id])
  permission  Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model RefreshToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  token       String   @unique
  userId      String   
  deviceId    String  
  expiresAt   DateTime 
  createdAt   DateTime @default(now())  

  user   User   @relation(fields: [userId], references: [id]) 
  device Device @relation(fields: [deviceId], references: [id])
}

model Device {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  
  deviceId    String   @unique  
  userAgent   String?  
  ipAddress   String?  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt       

  user         User           @relation(fields: [userId], references: [id])  
  refreshTokens RefreshToken[] // Back-reference for RefreshToken relation
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   
  token     String   @unique  
  expiresAt DateTime  
  createdAt DateTime @default(now())  

  user User @relation(fields: [email], references: [email])  

  @@index([expiresAt], map: "ttl_index") 
}
